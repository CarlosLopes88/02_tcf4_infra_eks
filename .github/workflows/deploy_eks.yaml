name: Deploy para EKS

on:
  pull_request:
    branches:
      - main
      - master

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

permissions:
  contents: read

jobs:
  deploy-cliente:
    name: Deploy Microserviço Cliente
    runs-on: ubuntu-latest
    outputs:
      cliente_endpoint: ${{ steps.get-endpoint.outputs.endpoint }}
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configurar credenciais AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Configurar Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.10.1

    - name: Inicializar Terraform
      run: |
        cd cliente
        terraform init

    - name: Aplicar configuração Terraform
      run: |
        cd cliente
        terraform apply -auto-approve \
          -var="db_username=${{ secrets.DOCDB_USERNAME }}" \
          -var="db_password=${{ secrets.DOCDB_PASSWORD }}" \
          -var="db_endpoint=${{ secrets.DOCDB_CLUSTER_ENDPOINT_CLI }}"

    - name: Capturar Endpoint do Cliente
      id: get-endpoint
      run: |
        cd cliente
        ENDPOINT=$(terraform output -raw microservice_cliente_loadbalancer_endpoint)
        echo "endpoint=${ENDPOINT}" >> $GITHUB_OUTPUT

  deploy-produto:
    name: Deploy Microserviço Produto
    needs: deploy-cliente
    runs-on: ubuntu-latest
    outputs:
      produto_endpoint: ${{ steps.get-endpoint.outputs.endpoint }}

    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configurar credenciais AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Configurar Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.10.1

    - name: Inicializar Terraform
      run: |
        cd produto
        terraform init

    - name: Aplicar configuração Terraform
      run: |
        cd produto
        terraform apply -auto-approve \
          -var="db_username=${{ secrets.DOCDB_USERNAME }}" \
          -var="db_password=${{ secrets.DOCDB_PASSWORD }}" \
          -var="db_endpoint=${{ secrets.DOCDB_CLUSTER_ENDPOINT_PRO }}"

    - name: Capturar Endpoint do Produto
      id: get-endpoint
      run: |
        cd produto
        ENDPOINT=$(terraform output -raw microservice_produto_loadbalancer_endpoint)
        echo "endpoint=${ENDPOINT}" >> $GITHUB_OUTPUT

  deploy-pedidopgto:
    name: Deploy Microserviço Pedido e Pagamento
    needs: [deploy-cliente, deploy-produto]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configurar credenciais AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Configurar Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.10.1

    - name: Inicializar Terraform
      run: |
        cd pedidopgto
        terraform init

    - name: Aplicar configuração Terraform
      run: |
        cd pedidopgto
        terraform apply -auto-approve \
          -var="cliente_endpoint=${{ needs.deploy-cliente.outputs.cliente_endpoint }}" \
          -var="produto_endpoint=${{ needs.deploy-produto.outputs.produto_endpoint }}" \
          -var="db_username=${{ secrets.DOCDB_USERNAME }}" \
          -var="db_password=${{ secrets.DOCDB_PASSWORD }}" \
          -var="db_endpoint=${{ secrets.DOCDB_CLUSTER_ENDPOINT_PED }}"