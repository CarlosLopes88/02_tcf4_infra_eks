name: Deploy EKS Applications with Database Dependencies

on:
  pull_request:
    branches:
      - main
      - master

jobs:
  validate:
    name: Validate Code and Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}

  deploy_cliente:
    name: Deploy Cliente
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      endpoint: ${{ steps.save_endpoint.outputs.endpoint }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Cliente Application
        working-directory: ${{ github.workspace }}/infra_eks/cliente
        env:
          DB_USERNAME: ${{ secrets.DB_MASTER_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
          DB_ENDPOINT_CLI: ${{ secrets.DOCDB_CLUSTER_ENDPOINT_CLI }}
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="db_username=$DB_USERNAME" \
            -var="db_password=$DB_PASSWORD" \
            -var="db_endpoint=$DB_ENDPOINT_CLI"
          
          echo "Aguardando LoadBalancer..."
          sleep 60
          
          ENDPOINT=$(terraform output -raw microservice_cliente_loadbalancer_endpoint || echo "")
          if [ ! -z "$ENDPOINT" ]; then
            echo "CLIENTE_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
          else
            echo "Erro: LoadBalancer endpoint não encontrado"
            exit 1
          fi

  deploy_produto:
    name: Deploy Produto
    needs: deploy_cliente
    runs-on: ubuntu-latest
    outputs:
      endpoint: ${{ steps.save_endpoint.outputs.endpoint }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Produto Application
        working-directory: ${{ github.workspace }}/infra_eks/produto
        env:
          DB_USERNAME: ${{ secrets.DB_MASTER_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
          DB_ENDPOINT_PRO: ${{ secrets.DOCDB_CLUSTER_ENDPOINT_PRO }}
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="db_username=$DB_USERNAME" \
            -var="db_password=$DB_PASSWORD" \
            -var="db_endpoint=$DB_ENDPOINT_PRO"
          
          echo "Aguardando LoadBalancer..."
          sleep 60
          
          ENDPOINT=$(terraform output -raw microservice_produto_loadbalancer_endpoint || echo "")
          if [ ! -z "$ENDPOINT" ]; then
            echo "PRODUTO_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
          else
            echo "Erro: LoadBalancer endpoint não encontrado"
            exit 1
          fi

  deploy_pedidopgto:
    name: Deploy PedidoPgto
    needs: deploy_produto
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy PedidoPgto Application
        working-directory: ${{ github.workspace }}/infra_eks/pedidopgto
        env:
          DB_USERNAME: ${{ secrets.DB_MASTER_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
          DB_ENDPOINT_PED: ${{ secrets.DOCDB_CLUSTER_ENDPOINT_PED }}
          PAGSEGURO_TOKEN: ${{ secrets.PAGSEGURO_TOKEN }}
          CLIENTE_ENDPOINT: ${{ env.CLIENTE_ENDPOINT }}
          PRODUTO_ENDPOINT: ${{ env.PRODUTO_ENDPOINT }}
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="db_username=$DB_USERNAME" \
            -var="db_password=$DB_PASSWORD" \
            -var="db_endpoint=$DB_ENDPOINT_PED" \
            -var="cliente_endpoint=$CLIENTE_ENDPOINT" \
            -var="produto_endpoint=$PRODUTO_ENDPOINT"