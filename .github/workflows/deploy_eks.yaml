name: Deploy EKS Applications with Comprehensive Error Handling

on:
  pull_request:
    branches:
      - main
      - master

jobs:
  deploy_cliente:
    name: Deploy Cliente
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      endpoint: ${{ steps.save_endpoint.outputs.endpoint }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Cliente Application
        id: deploy_cliente
        working-directory: ./cliente
        env:
          DB_USERNAME: ${{ secrets.DB_MASTER_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
          DB_ENDPOINT_CLI: ${{ secrets.DOCDB_CLUSTER_ENDPOINT_CLI }}
        run: |
          set -e
          terraform init -input=false
          terraform validate
          terraform plan -var="db_username=$DB_USERNAME" -var="db_password=$DB_PASSWORD" -var="db_endpoint=$DB_ENDPOINT_CLI" -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Save Cliente Output
        id: save_endpoint
        working-directory: ./cliente
        run: |
          ENDPOINT=$(terraform output -raw microservice_cliente_loadbalancer_endpoint || echo "")
          echo "endpoint=$ENDPOINT" >> $GITHUB_OUTPUT

  deploy_produto:
    name: Deploy Produto
    needs: deploy_cliente
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      endpoint: ${{ steps.save_endpoint.outputs.endpoint }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Produto Application
        id: deploy_produto
        working-directory: ./produto
        env:
          DB_USERNAME: ${{ secrets.DB_MASTER_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
          DB_ENDPOINT_PRO: ${{ secrets.DOCDB_CLUSTER_ENDPOINT_PRO }}
        run: |
          set -e
          terraform init -input=false
          terraform validate
          terraform plan -var="db_username=$DB_USERNAME" -var="db_password=$DB_PASSWORD" -var="db_endpoint=$DB_ENDPOINT_PRO" -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Save Produto Output
        id: save_endpoint
        working-directory: ./produto
        run: |
          ENDPOINT=$(terraform output -raw microservice_produto_loadbalancer_endpoint || echo "")
          echo "endpoint=$ENDPOINT" >> $GITHUB_OUTPUT

  deploy_pedidopgto:
    name: Deploy PedidoPgto
    needs: deploy_produto
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy PedidoPgto Application
        id: deploy_pedidopgto
        working-directory: ./pedidopgto
        env:
          DB_USERNAME: ${{ secrets.DB_MASTER_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
          DB_ENDPOINT_PED: ${{ secrets.DOCDB_CLUSTER_ENDPOINT_PED }}
          PAGSEGURO_TOKEN: ${{ secrets.PAGSEGURO_TOKEN }}
          CLIENTE_ENDPOINT: ${{ needs.deploy_cliente.outputs.endpoint }}
          PRODUTO_ENDPOINT: ${{ needs.deploy_produto.outputs.endpoint }}
        run: |
          set -e
          terraform init -input=false
          terraform validate
          terraform plan -var="db_username=$DB_USERNAME" -var="db_password=$DB_PASSWORD" -var="db_endpoint=$DB_ENDPOINT_PED" -var="cliente_endpoint=$CLIENTE_ENDPOINT" -var="produto_endpoint=$PRODUTO_ENDPOINT" -out=tfplan
          terraform apply -auto-approve tfplan